/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// EmberStorageBackendSpec defines the desired state of EmberStorageBackend
type EmberStorageBackendSpec struct {
	Config       EmberStorageBackendConfig `json:"config"`
	Image        string                    `json:"image",omitempty`
	NodeSelector map[string]string         `json:"nodeSelector",omitempty`
	Tolerations  []corev1.Toleration       `json:"tolerations",omitempty`
	Topologies   []Topologies              `json:"topologies",omitempty`
}

type EmberStorageBackendConfig struct {
	EnvVars     EnvVars `json:"envVars"`
	SysFiles    Secrets `json:"sysFiles"`
	DriverImage string  `json:"driverImage",omitempty`
}

// +k8s:deepcopy-gen=false
type EnvVars struct {
	X_CSI_BACKEND_CONFIG     interface{} `yaml:"X_CSI_BACKEND_CONFIG",omitempty`
	X_CSI_EMBER_CONFIG       interface{} `yaml:"X_CSI_EMBER_CONFIG",omitempty`
	X_CSI_PERSISTENCE_CONFIG interface{} `yaml:"X_CSI_PERSISTENCE_CONFIG",omitempty`
	X_CSI_DEBUG_MODE         string      `json:"X_CSI_DEBUG_MODE",omitempty`
	X_CSI_ABORT_DUPLICATES   string      `json:"X_CSI_ABORT_DUPLICATES",omitempty`
	X_CSI_DEFAULT_MOUNT_FS   string      `json:"X_CSI_DEFAULT_MOUNT_FS",omitempty`
	X_CSI_NODE_ID            string      `json:"X_CSI_NODE_ID",omitempty`
	X_CSI_STORAGE_NW_IP      string      `json:"X_CSI_STORAGE_NW_IP",omitempty`
	CSI_ENDPOINT             string      `json:"CSI_ENDPOINT",omitempty`
	CSI_MODE                 string      `json:"CSI_MODE",omitempty`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvVars) DeepCopyInto(out *EnvVars) {
	*out = *in
	return
}

type Secrets struct {
	Name string `json:"name",omitempty`
	Key  string `json:"key",omitempty`
}

type Topologies struct {
	// Key-value pairs corresponding to the NodeName
	Topology map[string]string `json:"topology,omitempty"`
	// Node Hostname with its allowed topology
	Nodes []corev1.NodeSelectorRequirement `json:"nodes,omitempty"`
}

// EmberStorageBackendStatus defines the observed state of EmberStorageBackend
type EmberStorageBackendStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// EmberStorageBackend is the Schema for the emberstoragebackends API
type EmberStorageBackend struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   EmberStorageBackendSpec   `json:"spec,omitempty"`
	Status EmberStorageBackendStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// EmberStorageBackendList contains a list of EmberStorageBackend
type EmberStorageBackendList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmberStorageBackend `json:"items"`
}

func init() {
	SchemeBuilder.Register(&EmberStorageBackend{}, &EmberStorageBackendList{})
}
